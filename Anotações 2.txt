Atalhos:

Copiar linha:
    Shift + Alt + ↓/↑

Mover linha:
    Alt + ↓/↑

Indentar linha:
    Ctrl + ]/[ 
    ou
    Tab
    
Copiar tudo:
    Ctrl + A

Recortar:
    Ctrl + X

Selecionar várias linhas de uma vez:
    Alt + Click

Crase:
    Alt + 9 + 6
    ou
    Shift + Crase + Espaço

Arrumar Código:
    Alt + Shift + F

Escrever Pipe (||):
    Shift + Pipe(do lado do Z)

Alterar nome de todas as constantes/variáveis iguais 
    Click + F2

Procurar arquivo por nome:
    Control + 'P'

Instalar um servidor http:
    npm install -g http-server

Iniciar um servidor http:
    http-server ./

Fazer comentário no HTML:
    <!-- Comentário -->

Voltar para configuração original do DevTools (inspecionar) (deleta element.style)
    F5

Branch:
    Uma versão paralela do código que está contida dentro do repositório, mas não afeta a ramificação primária ou principal.

Clone	
    Baixar uma cópia completa dos dados de um repositório de GitHub.com, incluindo todas as versões de cada arquivo e pasta.

Fork	
    Um novo repositório que compartilha configurações de código e visibilidade com o repositório "upstream" original.

Mesclar	
    Pegar as alterações de um branch e aplicá-las à outra.

Solicitação de pull	
    Uma solicitação para mesclar as alterações de um branch em outro.

Remoto	
    Um repositório armazenado no GitHub, não no seu computador.

Upstream	
    O branch em um repositório original em que foi criado um fork ou clonado. O branch correspondente no branch clonado ou em que o fork foi criado é chamado de "downstream".


//


Operadores:
    + === adição
    - === subtração
    * === multiplicação
    / === divisão real (vírgula)
    % === divisão inteira (resto)
   ** === potência (ao quadrado)

     =  Atribui a
    ==	Igual a (pode ser string ou número)
   ===  Igual a (não pode ser string)
    !=	Diferente 
    <=	Menor ou Igual
    >=	Maior ou Igual

Switch não funciona quando tem que comparar valores numéricos!


//


Objetos:
    rafael['nome'] = 'teste';
    rafael.nome = 'teste';

Guardar Informação:
    classIMC(){
            const imc = this.calcIMC();
        }

function descreverPessoa(pessoa) {
        console.log(`Nome: ${pessoa.nome}; Idade: ${pessoa.idade};`);
    }

    const renan = new Pessoa('Renan', 30);
    console.log(descreverPessoa(renan));


//


Arrays(listas):
São representadas assim:
    const alunos = ['João', 'Lucas', 'Guilherme', 'Adriana'];

Para chamar só a primeira pessoa (João):
    console.log(alunos[0]);

Para adicionar algo:
    alunos.push('Rafael');

Fazer uma média (arredondada):
    console.log(notas.length);

Fazer uma média, com valor decimal:
    const soma = notas[0] + notas[1] + notas[2] + notas[3] + notas[4] + notas[5];
        console.log(soma / 6);
            
Dar um print em determinada característica da function(pessoa):
    if (pessoa.nome === 'Rafael'){
        pessoa.print();
            }


//


Estruturas de Repetição:
 
for (let i = 0; i < 10; i++) {
    
}
i++ === let i = 1;
        ++ = +1;

    Ele vai repetir a mesma coisa até chegar em um número que é maior do que 10.


     else if (numero > maiorNumeroPar) {
            maiorNumeroPar = numero;
        }

//

Desenvolvimento WEB:

Ordem dos fatores(HTML):

head: css(style), title;
body: h1, p, script;

